using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;


namespace SIS.Infrastructure
{
    public class EFSISTeacherLocationInterestRepository : ISISTeacherLocationInterestRepository
    {
        private readonly ILogger<EFSISTeacherLocationInterestRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;
        private static Dictionary<int, TeacherLocationInterest> _teacherLocationInterests = new();

        public Dictionary<int, TeacherLocationInterest> TeacherLocationInterests
        {
            get
            {
                if(_teacherLocationInterests != null) return _teacherLocationInterests;
                return RefreshTeacherLocationInterests();
            }
        }

        public EFSISTeacherLocationInterestRepository(ILogger<EFSISTeacherLocationInterestRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;
        }

        public void Delete(TeacherLocationInterest teacherLocationInterest)
        {
            if (!Exists(teacherLocationInterest)) return;

            var efToDelete = GetEFEntity(teacherLocationInterest);

            try
            {
                var efRemove = _context.Remove(efToDelete).Entity;
                _context.SaveChanges();
                RefreshTeacherLocationInterests();
            }
            catch (Exception ex)
            {
                // if inserting in db throws an exception, we log it and re-throw to client
                _logger.LogError(ex.Message, ex);
                throw;
            }

        }

        public bool Exists(TeacherLocationInterest teacherLocationInterest)
        {
            return GetEFEntity(teacherLocationInterest) != null;
        }

        public int Insert(TeacherLocationInterest teacherLocationInterest)
        {
            // if this combination of values (not taking in acount the id and preference, to avoid conflicting data)
            // is already in the db, return that enitity's id
            if (Exists(teacherLocationInterest)) return GetEFEntity(teacherLocationInterest).TeacherLocationInterestId;

            try
            {
                var efAcademicYear = _context.AcademicYears
                                            .Where(ay => ay.StartDate.Date == teacherLocationInterest.AcademicYearStart.Date
                                                      && ay.StopDate.Date == teacherLocationInterest.AcademicYearStop.Date)
                                                      .FirstOrDefault();
                var efTeacher = _context.Teachers
                                      .Include(t => t.Person)
                                      .Where(t => t.Person.FirstName == teacherLocationInterest.TeacherFirstName 
                                               && t.Person.LastName == teacherLocationInterest.TeacherLastName)
                                      .FirstOrDefault();

                var efTeacherPreference = _context.TeacherPreferences
                                                .Where(tp => tp.Description == teacherLocationInterest.TeacherPreferenceDescription)
                                                .FirstOrDefault();

                var efLocation = _context.Locations
                                        .Where(l => l.Name == teacherLocationInterest.LocationName)
                                        .FirstOrDefault();

                //if any of these is null, db will throw exception when trying to insert
                EFRepository.Models.TeacherLocationInterest newInterest = new()
                {
                    //id is generated by db
                    AcademicYearId = efAcademicYear.AcademicYearId,
                    TeacherId = efTeacher.TeacherId,
                    TeacherPreferenceId = efTeacherPreference.TeacherPreferenceId,
                    LocationId = efLocation.LocationId,
                };
                var efNewTeacherLocationInterest = _context.TeacherLocationInterests.Add(newInterest).Entity;
                var count = _context.SaveChanges();
                RefreshTeacherLocationInterests();
                return efNewTeacherLocationInterest.TeacherLocationInterestId; //Gives back the newly generated id
            } 
            catch (Exception ex) 
            {
                // if inserting in db throws an exception, we log it and re-throw to client
                _logger.LogError(ex.Message, ex);
                throw;
            }

        }

        public Dictionary<int, TeacherLocationInterest> RefreshTeacherLocationInterests()
        {
            _teacherLocationInterests.Clear();
            var dbTeacherLocationInterests = _context.TeacherLocationInterests
                                                        .Include(tli => tli.AcademicYear)
                                                        .Include(tli => tli.Teacher)
                                                        .Include(tli => tli.TeacherPreference)
                                                        .Include(tli => tli.Location)
                                                        .ToList();
            foreach(var locationInterest in dbTeacherLocationInterests)
            {
                var li = new TeacherLocationInterest()
                {
                    TeacherLocationInterestId = locationInterest.TeacherLocationInterestId,
                    AcademicYearStart = locationInterest.AcademicYear.StartDate.Date,
                    AcademicYearStop = locationInterest.AcademicYear.StopDate.Date,
                    TeacherFirstName = locationInterest.Teacher.Person.FirstName,
                    TeacherLastName = locationInterest.Teacher.Person.LastName,
                    TeacherPreferenceDescription = locationInterest.TeacherPreference.Description,
                    LocationName = locationInterest.Location.Name,
                };

                _teacherLocationInterests.Add(li.TeacherLocationInterestId, li);
            }

            return _teacherLocationInterests;
        }

        public void Update(TeacherLocationInterest teacherLocationInterestToUpdate, TeacherLocationInterest newTeacherLocationInterest)
        {
            if (!Exists(teacherLocationInterestToUpdate)) return;

            var efToUpdate = GetEFEntity(teacherLocationInterestToUpdate);

            try
            {
                // get the ef entities for the new values
                var newEfAcademicYear = _context.AcademicYears
                                            .Where(ay => ay.StartDate.Date == newTeacherLocationInterest.AcademicYearStart.Date
                                                      && ay.StopDate.Date == newTeacherLocationInterest.AcademicYearStop.Date)
                                                      .FirstOrDefault();
                var newEfTeacher = _context.Teachers
                                      .Include(t => t.Person)
                                      .Where(t => t.Person.FirstName == newTeacherLocationInterest.TeacherFirstName
                                               && t.Person.LastName == newTeacherLocationInterest.TeacherLastName)
                                      .FirstOrDefault();

                var newEfTeacherPreference = _context.TeacherPreferences
                                                .Where(tp => tp.Description == newTeacherLocationInterest.TeacherPreferenceDescription)
                                                .FirstOrDefault();

                var newEfLocation = _context.Locations
                                        .Where(l => l.Name == newTeacherLocationInterest.LocationName)
                                        .FirstOrDefault();

                // attribute them to the entity to update
                // id stays the same
                efToUpdate.AcademicYearId = newEfAcademicYear.AcademicYearId;
                efToUpdate.TeacherId = newEfTeacher.TeacherId;
                efToUpdate.TeacherPreferenceId = newEfTeacherPreference.TeacherPreferenceId;
                efToUpdate.LocationId = newEfLocation.LocationId;

                // here I can potentially create conflicting data
                // this is why there should be a constraint on the db-table to only allow unique combination of academicyear-teacher-location
                // (see comment in GetEFEntity)

                var efUpdate = _context.Update(efToUpdate).Entity;
                _context.SaveChanges();
            }
            catch (Exception ex) 
            {
                // if updating in db throws an exception, we log it and re-throw
                _logger.LogError(ex.Message, ex);
                throw;
            }

        }

        private SIS.Infrastructure.EFRepository.Models.TeacherLocationInterest GetEFEntity(TeacherLocationInterest locationInterest)
        {
            // Not getting by id because it's the unique combination of the values that's important
            // There should not be 2 entries with unique id but same values = conflicting data
            // The combination of academicyear - teacher - location should be unique so only one preference can be linked to 
            //  a specific year, teacher and location. Not taking in acount the lines which are IsDeleted = true

            // ?? Database should only allow unique combination ?? 
            var efTeacherLocationInterest = _context.TeacherLocationInterests
                                                        .Include(tli => tli.AcademicYear)
                                                        .Include(tli => tli.Teacher)
                                                        .Include(tli => tli.TeacherPreference)
                                                        .Include(tli => tli.Location)
                                                        .Where(tli => tli.AcademicYear.StartDate.Date == locationInterest.AcademicYearStart.Date
                                                        && tli.AcademicYear.StopDate.Date == locationInterest.AcademicYearStop.Date
                                                        && tli.Teacher.Person.FirstName == locationInterest.TeacherFirstName
                                                        && tli.Teacher.Person.LastName == locationInterest.TeacherLastName
                                                        && tli.Location.Name == locationInterest.LocationName)
                                                        .FirstOrDefault();
            return efTeacherLocationInterest;
        }
    }
}
