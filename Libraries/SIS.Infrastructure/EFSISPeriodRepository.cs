using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;

namespace SIS.Infrastructure
{
    public class EFSISPeriodRepository : ISISPeriodRepository
    {
        private readonly ILogger<EFSISPeriodRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;

        private static Dictionary<string, Period> _periods = new();
        public Dictionary<string, Period> Periods
        {
            get
            {
                if(_periods != null) return _periods;
                return RefreshPeriods();
            }
        }

        public EFSISPeriodRepository(ILogger<EFSISPeriodRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            RefreshPeriods();
        }

        public void Delete(Period periodToDelete)
        {
            if(!Exists(periodToDelete)) return;

            try
            {
                var efPeriod = GetEFEntity(periodToDelete);
                var efRemove = _context.Remove(efPeriod).Entity;
                var count = _context.SaveChanges();
                _logger.LogInformation($"SaveChanges effected {count} row(s)");
            }
            catch (Exception ex)
            {
                // if deleting from db throws an exception, we log it and re-throw to client
                _logger.LogError(ex.Message, ex);
                throw;
            }
        }

        public bool Exists(Period period)
        {
            return GetEFEntity(period) != null;
        }

        public int Insert(Period newPeriod)
        {
            if(_periods.ContainsKey(newPeriod.Name))
            {
                return _periods[newPeriod.Name].PeriodId;
            }

            try
            {
                EFRepository.Models.Period period = new()
                {
                    // id is generated by db
                    Name = newPeriod.Name,
                };

                var efPeriod = _context.Periods.Add(period).Entity;
                var count = _context.SaveChanges();
                _logger.LogInformation($"SaveChanges effected {count} row(s)");
                RefreshPeriods();
                return efPeriod.PeriodId;
            }
            catch (Exception ex)
            {
                // if inserting in db throws an exception, we log it and re-throw to client
                _logger.LogError(ex.Message, ex);
                throw;
            }
        }

        public Dictionary<string, Period> RefreshPeriods()
        {
            _periods.Clear();

            var dbPeriods = _context.Periods.ToList();
            foreach (var period in dbPeriods)
            {
                var p = new Period()
                {
                    PeriodId = period.PeriodId,
                    Name = period.Name,
                };

                _periods.Add(p.Name, p);
            }

            return _periods;
        }

        public void Update(Period periodToUpdate, Period newPeriod)
        {
            if (!Exists(periodToUpdate)) return;

            try
            {
                var efPeriod = GetEFEntity(periodToUpdate);
                // id stays the same
                if(efPeriod.Name != newPeriod.Name)
                {
                    efPeriod.Name = newPeriod.Name;
                }
                var efUpdate = _context.Update(efPeriod).Entity;
                var count = _context.SaveChanges();
                _logger.LogInformation($"SaveChanges effected {count} row(s)");
                RefreshPeriods();
            }
            catch (Exception ex)
            {
                // if updating in db throws an exception, we log it and re-throw
                _logger.LogError(ex.Message, ex);
                throw;
            }
        }

        private EFRepository.Models.Period GetEFEntity(Period period)
        {

            var efPeriod = _context.Periods.Where(p => p.Name == period.Name).FirstOrDefault();
            return efPeriod;
        }
    }
}
