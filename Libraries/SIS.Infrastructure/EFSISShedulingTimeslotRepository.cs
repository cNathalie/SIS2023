using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;

namespace SIS.Infrastructure
{
    public class EFSISShedulingTimeslotRepository : ISISShedulingTimeslotRepository
    {
        private readonly ILogger<EFSISShedulingTimeslotRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;

        public EFSISShedulingTimeslotRepository(ILogger<EFSISShedulingTimeslotRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            RefreshShedulingTimeslots();
        }

        private static Dictionary<string, ShedulingTimeslot> _shedulingTimeslots = new();
        public Dictionary<string, ShedulingTimeslot> ShedulingTimeslots
        {
            get
            {
                if(_shedulingTimeslots != null) return _shedulingTimeslots;
                return RefreshShedulingTimeslots();
            }
        }

        public void Delete(ShedulingTimeslot timeslot)
        {
            if(!Exists(timeslot)) return;

            try
            {
                var efTimeslot = GetEFEntity(timeslot);
                var efDelete = _context.Remove(efTimeslot).Entity;
                var count = _context.SaveChanges();
                _logger.LogInformation($"SaveChanges effected {count} row(s)");
            }
            catch (Exception ex)
            {
                // if deleting from db throws an exception, we log it and re-throw to client
                _logger.LogError(ex.Message, ex);
                throw;
            }
        }

        public bool Exists(ShedulingTimeslot timeslot)
        {
            return GetEFEntity(timeslot) != null;
        }

        public int Insert(ShedulingTimeslot timeslot)
        {
            if (_shedulingTimeslots.ContainsKey(timeslot.Name))
            {
                return _shedulingTimeslots[timeslot.Name].SchedulingTimeslotId;
            }

            try
            {
                EFRepository.Models.SchedulingTimeslot newTimeslot = new()
                {
                    //id generated by db
                    Name = timeslot.Name,
                    Description = timeslot.Description,
                    StartTime = timeslot.StartTime,
                    StopTime = timeslot.StopTime
                };

                var efTimeslot = _context.SchedulingTimeslots.Add(newTimeslot).Entity;
                var count = _context.SaveChanges();
                _logger.LogInformation($"SaveChanges effected {count} row(s)");
                RefreshShedulingTimeslots();
                return efTimeslot.SchedulingTimeslotId;
            }
            catch (Exception ex)
            {
                // if inserting in db throws an exception, we log it and re-throw to client
                _logger.LogError(ex.Message, ex);
                throw;
            }
        }

        public Dictionary<string, ShedulingTimeslot> RefreshShedulingTimeslots()
        {
            _shedulingTimeslots.Clear();

            var dbShedulingTimeslots = _context.SchedulingTimeslots.ToList();
            foreach(var timeslot in dbShedulingTimeslots)
            {
                var ts = new ShedulingTimeslot()
                {
                    SchedulingTimeslotId = timeslot.SchedulingTimeslotId,
                    Name = timeslot.Name,
                    Description = timeslot.Description,
                    StartTime = timeslot.StartTime,
                    StopTime = timeslot.StopTime,
                };

                _shedulingTimeslots.Add(ts.Name, ts);
            }
            return _shedulingTimeslots;
        }

        public void Update(ShedulingTimeslot timeslotToUpdate, ShedulingTimeslot newTimeslot)
        {
            if(!Exists(timeslotToUpdate)) return;

            try
            {
                var efTimeslotToUpdate = GetEFEntity(timeslotToUpdate);

                //id stays the same
                if(efTimeslotToUpdate.Name != newTimeslot.Name )
                {
                    efTimeslotToUpdate.Name = newTimeslot.Name;
                }
                if(efTimeslotToUpdate.Description != newTimeslot.Description )
                {
                    efTimeslotToUpdate.Description = newTimeslot.Description;
                }
                if(efTimeslotToUpdate.StartTime.TimeOfDay != newTimeslot.StartTime.TimeOfDay)
                {
                    efTimeslotToUpdate.StartTime = newTimeslot.StartTime;
                }
                if(efTimeslotToUpdate.StopTime.TimeOfDay != newTimeslot.StopTime.TimeOfDay)
                {
                    efTimeslotToUpdate.StopTime = newTimeslot.StopTime;
                }

                var efUpdate = _context.Update(efTimeslotToUpdate).Entity;
                var count = _context.SaveChanges();
                _logger.LogInformation($"SaveChanges effected {count} row(s)");
                RefreshShedulingTimeslots();
            }
            catch (Exception ex)
            {
                // if updating in db throws an exception, we log it and re-throw
                _logger.LogError(ex.Message, ex);
                throw;
            }
        }

        private EFRepository.Models.SchedulingTimeslot GetEFEntity(ShedulingTimeslot timeslot)
        {
            var efTimeslot = _context.SchedulingTimeslots.Where(st => st.SchedulingTimeslotId == timeslot.SchedulingTimeslotId && st.Name == timeslot.Name)
                                                         .FirstOrDefault();
            return efTimeslot;
        }
    }
}
