using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;


namespace SIS.Infrastructure
{
    public class EFSISCoordinationRoleRepository : ISISCoordinationRoleRepository
    {
        private readonly ILogger<EFSISCoordinationRoleRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;
        private Dictionary<string, CoordinationRole> _coordinationRoles = new();
        public Dictionary<string, CoordinationRole> CoordinationRoles
        {
            get
            {
                if (_coordinationRoles != null) { return _coordinationRoles; }
                return RefreshCoordinationRoles();
            }
        }

        public EFSISCoordinationRoleRepository(ILogger<EFSISCoordinationRoleRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            //Load CoordinationRoles
            RefreshCoordinationRoles();
        }

        public void Delete(CoordinationRole coordinationRole)
        {
            if (!Exists(coordinationRole))
            {
                return;
            }

            var efcoordinationRole = _context.CoordinationRoles.Where(cr => cr.Name == coordinationRole.Name && cr.AssignmentPercentage == coordinationRole.AssignmentPercentage).FirstOrDefault();

            try
            {
                var efRemove = _context.Remove(efcoordinationRole).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
                throw;
            }
        }

        public bool Exists(CoordinationRole coordinationRole)
        {
            var efcoordinationRole = _context.CoordinationRoles.Where(cr => cr.Name == coordinationRole.Name && cr.AssignmentPercentage == coordinationRole.AssignmentPercentage).FirstOrDefault();
            return efcoordinationRole != null;
        }

        public int Insert(CoordinationRole coordinationRole)
        {
            // if the coordintionRole already exists
            if (Exists(coordinationRole))
            {
                throw new Exception("Coordintation Role already exists");
            }

            // else try insert
            try
            {
                EFRepository.Models.CoordinationRole newCoordinationRole = new()
                {
                    //id is generated by db on SaveChanges
                    Name = coordinationRole.Name,
                    AssignmentPercentage = coordinationRole.AssignmentPercentage,
                };
                var efCoordinationRole = _context.CoordinationRoles.Add(newCoordinationRole).Entity;
                var count = _context.SaveChanges();

                return efCoordinationRole.CoordinationRoleId;

            } 
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
                throw;
            }


        }

        public Dictionary<string, CoordinationRole> RefreshCoordinationRoles()
        {
            _coordinationRoles.Clear();
            var dbCoordinationRoles = _context.CoordinationRoles.ToList();
            foreach (var coordinationRole in dbCoordinationRoles)
            {
                var newCoordinationRole = new CoordinationRole
                {
                    Name = coordinationRole.Name,
                    AssignmentPercentage = coordinationRole.AssignmentPercentage,
                };
                _coordinationRoles.Add(newCoordinationRole.Name, newCoordinationRole);
            }
            return _coordinationRoles;
        }

        public void Update(CoordinationRole coordinationRoleToUpdate, CoordinationRole newCoordinationRole)
        {
            if (!Exists(coordinationRoleToUpdate)) return;

            var efCoordinationRoleToUpdate = _context.CoordinationRoles.Where(cr => cr.Name == coordinationRoleToUpdate.Name && cr.AssignmentPercentage == coordinationRoleToUpdate.AssignmentPercentage).FirstOrDefault();

            try
            {
                //id is not updated
                efCoordinationRoleToUpdate.Name = newCoordinationRole.Name;
                efCoordinationRoleToUpdate.AssignmentPercentage = newCoordinationRole.AssignmentPercentage;

                var efUpdate = _context.Update(efCoordinationRoleToUpdate).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
                throw new Exception("An error occured while trying to update the Coordination Role: " + ex.Message);
            }
        }

    }
}
